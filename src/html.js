import { getFlagEmoji } from "./utils.js";

export class Document {
    constructor(request) {
        this.title = "Proxy Subscription";
        this.infos = [];
        this.proxies = [];
        this.buttons = [];
        this.request = request;
    }

    setTitle(title) {
        this.title = title;
    }

    addInfo(text) {
        this.infos.push(text);
    }

    registerProxies(proxyInfo, proxies) {
        this.proxies.push({ info: proxyInfo, links: proxies });
    }

    addPageButton(text, link, disabled) {
        this.buttons.push({ text, link, disabled });
    }

    createProxyCard(info, links) {
        const { proxyIP, proxyPort, country, org } = info;
        const allLinksRaw = links.join('\n');
        const allLinksBase64 = btoa(allLinksRaw);
        const safeAllLinksRaw = JSON.stringify(allLinksRaw);

        return `
        <div class="bg-gray-800 rounded-lg shadow-lg p-5 border border-gray-700 hover:border-blue-500 transition-all duration-300">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-white">${getFlagEmoji(country)} ${org}</h3>
                <span class="text-sm text-gray-400">${proxyIP}:${proxyPort}</span>
            </div>
            <div class="space-y-2">
                ${links.map(link => this.createLinkEntry(link)).join('')}
            </div>
            <div class="mt-4 pt-4 border-t border-gray-700 flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                <button onclick="copyToClipboard(this, '${allLinksBase64}', true)" class="copy-btn w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition-colors duration-300">Copy All (Base64)</button>
                <button onclick="copyToClipboard(this, ${safeAllLinksRaw})" class="copy-btn w-full bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded transition-colors duration-300">Copy All (Raw)</button>
            </div>
        </div>
    `;
    }

    createLinkEntry(link) {
        const url = new URL(link);
        const protocol = url.protocol.replace(':', '');
        const remark = decodeURIComponent(url.hash.substring(1));

        let protocolClass = '';
        let protocolName = protocol.toUpperCase();
        switch (protocol) {
            case 'vless': protocolClass = 'border-blue-400 text-blue-300'; break;
            case 'vmess': protocolClass = 'border-green-400 text-green-300'; break;
            case 'ss': protocolClass = 'border-pink-400 text-pink-300'; break;
            default: protocolClass = 'border-yellow-400 text-yellow-300';
        }
        return `
        <div class="flex items-center justify-between bg-gray-700/50 p-2 rounded-md">
            <div class="flex-grow truncate pr-2">
                <span class="font-bold p-1 rounded-sm text-xs mr-2 border ${protocolClass}">${protocolName}</span>
                <span class="font-mono text-xs text-gray-300">${remark}</span>
            </div>
            <button onclick="copyToClipboard(this, '${link}')" class="copy-btn flex-shrink-0 bg-gray-600 text-xs text-white font-semibold py-1 px-3 rounded hover:bg-gray-500 transition-colors">Copy</button>
        </div>
    `;
    }

    createPageButton(text, link, disabled) {
        const disabledClasses = "bg-gray-700 text-gray-400 cursor-not-allowed";
        const enabledClasses = "bg-blue-600 hover:bg-blue-700 text-white";
        const tag = disabled ? 'span' : 'a';
        const href = disabled ? '' : `href="${link}"`;

        return `
        <${tag} ${href} class="px-6 py-3 rounded-lg font-semibold ${disabled ? disabledClasses : enabledClasses} transition-colors duration-300">${text}</${tag}>
    `;
    }

    build(env) {
        const pageTitle = "Badak Terbang Proxy";
        const headerTitle = this.title || "Proxy Subscription Links";

        return `
<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${pageTitle}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="icon" href="https://www.cloudflare.com/favicon.ico" type="image/x-icon">
    <style>
        .copy-btn:active { transform: scale(0.95); }
        .copied { background-color: #2f855a !important; }
    </style>
</head>
<body class="bg-gray-900 text-gray-200 font-sans">
    <div class="container mx-auto p-4 md:p-8">
        <header class="text-center mb-10">
            <h1 class="text-3xl md:text-5xl font-bold text-white mb-2">${headerTitle}</h1>
            <p class="text-gray-400">Generated by Cloudflare Workers</p>
            <div class="mt-6 flex justify-center items-center space-x-4 text-gray-400 border border-gray-700 bg-gray-800/50 rounded-lg p-3 max-w-md mx-auto">
                ${this.infos.map(info => `<span>${info}</span>`).join('<span class="border-l border-gray-600 mx-1 h-5"></span>')}
            </div>
        </header>

        <main>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                ${this.proxies.map(p => this.createProxyCard(p.info, p.links)).join('')}
            </div>
        </main>

        <footer class="mt-12">
            <div class="flex justify-center space-x-4">
                ${this.buttons.map(btn => this.createPageButton(btn.text, btn.link, btn.disabled)).join('')}
            </div>
            <p class="mt-8 text-center text-gray-500 text-sm">
                Powered by <a href="https://github.com/34736384" target="_blank" class="hover:text-blue-400">Badak Terbang Project</a>
            </p>
        </footer>
    </div>
    <script>
        function copyToClipboard(btn, text, isBase64 = false) {
            const textToCopy = isBase64 ? atob(text) : text;
            navigator.clipboard.writeText(textToCopy).then(() => {
                const originalText = btn.textContent;
                btn.textContent = 'Copied!';
                btn.classList.add('copied');
                setTimeout(() => {
                    btn.textContent = originalText;
                    btn.classList.remove('copied');
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy: ', err);
                alert('Failed to copy to clipboard.');
            });
        }
    </script>
</body>
</html>
        `;
    }
}
